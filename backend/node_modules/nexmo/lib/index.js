"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var querystring = require("querystring");

var msgpath = { host: "rest.nexmo.com", path: "/sms/json" };
var shortcodePath = { host: "rest.nexmo.com", path: "/sc/us/${type}/json" };
var ttsEndpoint = { host: "api.nexmo.com", path: "/tts/json" };
var ttsPromptEndpoint = { host: "api.nexmo.com", path: "/tts-prompt/json" };
var callEndpoint = { host: "rest.nexmo.com", path: "/call/json" };
var verifyEndpoint = { host: "api.nexmo.com", path: "/verify/json" };
var checkVerifyEndpoint = { host: "api.nexmo.com", path: "/verify/check/json" };
var controlVerifyEndpoint = {
  host: "api.nexmo.com",
  path: "/verify/control/json"
};
var searchVerifyEndpoint = {
  host: "api.nexmo.com",
  path: "/verify/search/json"
};
var niEndpoint = { host: "api.nexmo.com", path: "/ni/advanced/async/json" };
var niBasicEndpoint = { host: "api.nexmo.com", path: "/ni/basic/json" };
var niStandardEndpoint = { host: "api.nexmo.com", path: "/ni/standard/json" };
var niAdvancedEndpoint = { host: "api.nexmo.com", path: "/ni/advanced/json" };
var up = {};
var numberPattern = new RegExp("^[0-9 +()-]*$");

var _options = null;

// Error message resources are maintained globally in one place for easy management
var ERROR_MESSAGES = {
  sender: "Invalid from address",
  to: "Invalid to address",
  msg: "Invalid Text Message",
  msgParams: "Invalid shortcode message parameters",
  countrycode: "Invalid Country Code",
  msisdn: "Invalid MSISDN passed",
  body: "Invalid Body value in Binary Message",
  udh: "Invalid udh value in Binary Message",
  title: "Invalid title in WAP Push message",
  url: "Invalid url in WAP Push message",
  maxDigits: "Invalid max digits for TTS prompt",
  byeText: "Invalid bye text for TTS prompt",
  pinCode: "Invalid pin code for TTS confirm",
  failedText: "Invalid failed text for TTS confirm",
  answerUrl: "Invalid answer URL for call",
  verifyValidation: "Missing Mandatory fields (number and/or brand)",
  checkVerifyValidation: "Missing Mandatory fields (request_id and/or code)",
  controlVerifyValidation: "Missing Mandatory fields (request_id and/or cmd-command)",
  searchVerifyValidation: "Missing Mandatory fields (request_id or request_ids)",
  numberInsightAdvancedValidation: "Missing Mandatory fields (number and/or callback url)",
  numberInsightValidation: "Missing Mandatory field - number",
  numberInsightPatternFailure: "Number can contain digits and may include any or all of the following: white space, -,+, (, ).",
  optionsNotAnObject: "Options parameter should be a dictionary. Check the docs for valid properties for options",
  product: "Invalid product. Should be one of [voice, sms]"
};

exports.initialize = function (pkey, psecret, options) {
  if (!pkey || !psecret) {
    throw "key and secret cannot be empty, set valid values";
  }
  up = {
    api_key: pkey,
    api_secret: psecret
  };
  _options = options;
};

exports.sendBinaryMessage = function (sender, recipient, body, udh, callback) {
  if (!body) {
    sendError(callback, new Error(ERROR_MESSAGES.body));
  } else if (!udh) {
    sendError(callback, new Error(ERROR_MESSAGES.udh));
  } else {
    sendMessage({
      from: sender,
      to: recipient,
      type: "binary",
      body: body,
      udh: udh
    }, callback);
  }
};

exports.sendWapPushMessage = function (sender, recipient, title, url, validity, callback) {
  if (!title) {
    sendError(callback, new Error(ERROR_MESSAGES.title));
  } else if (!url) {
    sendError(callback, new Error(ERROR_MESSAGES.url));
  } else {
    if (typeof validity === "function") {
      callback = validity;
      validity = 86400000;
    }
    sendMessage({
      from: sender,
      to: recipient,
      type: "wappush",
      title: title,
      validity: validity,
      url: url
    }, callback);
  }
};

exports.sendTextMessage = function (sender, recipient, message, opts, callback) {
  if (!message) {
    sendError(callback, new Error(ERROR_MESSAGES.msg));
  } else {
    if (!callback) {
      callback = opts;
      opts = {};
    }
    opts["from"] = sender;
    opts["to"] = recipient;
    opts["text"] = message;
    sendMessage(opts, callback);
  }
};

exports.sendMessage = function (opts, callback) {
  sendMessage(opts, callback);
};
function sendMessage(data, callback) {
  if (!data.from) {
    sendError(callback, new Error(ERROR_MESSAGES.sender));
  } else if (!data.to) {
    sendError(callback, new Error(ERROR_MESSAGES.to));
  } else {
    var path = clone(msgpath);
    path.path += "?" + querystring.stringify(data);
    _options.logger.info("sending message from " + data.from + " to " + data.to + " with message " + data.text);
    sendRequest(path, "POST", function (err, apiResponse) {
      if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {
        sendError(callback, new Error(apiResponse.messages[0]["error-text"]), apiResponse);
      } else {
        if (callback) callback(err, apiResponse);
      }
    });
  }
}

function sendViaShortcode(type, recipient, messageParams, opts, callback) {
  if (!recipient) {
    sendError(callback, new Error(ERROR_MESSAGES.to));
  }
  if (!messageParams || !Object.keys(messageParams)) {
    sendError(callback, new Error(ERROR_MESSAGES.msgParams));
  }
  opts = opts || {};
  var path = clone(shortcodePath);
  path.path = path.path.replace("${type}", type);
  Object.keys(messageParams).forEach(function (key) {
    opts[key] = messageParams[key];
  });
  opts.to = recipient;
  path.path += "?" + querystring.stringify(opts);
  _options.logger.info("sending message from shortcode " + type + " to " + recipient + " with parameters " + JSON.stringify(messageParams));
  sendRequest(path, "POST", function (err, apiResponse) {
    if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {
      sendError(callback, new Error(apiResponse.messages[0]["error-text"]), apiResponse);
    } else {
      if (callback) callback(err, apiResponse);
    }
  });
}
exports.shortcodeAlert = function (recipient, messageParams, opts, callback) {
  sendViaShortcode("alert", recipient, messageParams, opts, callback);
};
exports.shortcode2FA = function (recipient, messageParams, opts, callback) {
  sendViaShortcode("2fa", recipient, messageParams, opts, callback);
};
exports.shortcodeMarketing = function (recipient, messageParams, opts, callback) {
  sendViaShortcode("marketing", recipient, messageParams, opts, callback);
};

function clone(a) {
  return JSON.parse(JSON.stringify(a));
}

function getEndpoint(action) {
  return { path: action };
}

function sendRequest(endpoint, method, callback) {
  endpoint.path = endpoint.path + (endpoint.path.indexOf("?") > 0 ? "&" : "?") + querystring.stringify(up);
  _options.httpClient.request(endpoint, method, callback);
}

exports.checkBalance = function (callback) {
  var balanceEndpoint = getEndpoint("/account/get-balance");
  sendRequest(balanceEndpoint, callback);
};

exports.getPricing = function (countryCode, callback) {
  if (!countryCode || countryCode.length !== 2) {
    sendError(callback, new Error(ERROR_MESSAGES.countrycode));
  } else {
    var pricingEndpoint = getEndpoint("/account/get-pricing/outbound");
    pricingEndpoint.path += "?country=" + countryCode;
    sendRequest(pricingEndpoint, callback);
  }
};

exports.getPhonePricing = function (product, msisdn, callback) {
  if (!product || product !== "sms" && product !== "voice") {
    sendError(callback, new Error(ERROR_MESSAGES.product));
  } else if (!msisdn) {
    sendError(callback, new Error(ERROR_MESSAGES.msisdn));
  } else {
    var pricingEndpoint = getEndpoint("/account/get-phone-pricing/outbound");
    pricingEndpoint.path += "/" + product + "/" + up.api_key + "/" + up.api_secret + "/" + msisdn;
    sendRequest(pricingEndpoint, callback);
  }
};

exports.getNumbers = function (options, callback) {
  var numbersEndpoint = getEndpoint("/account/numbers");
  if (typeof options === "function") {
    callback = options;
  } else if ((typeof options === "undefined" ? "undefined" : _typeof(options)) === "object") {
    numbersEndpoint.path = numbersEndpoint.path + "?";
    for (var key in options) {
      numbersEndpoint.path = numbersEndpoint.path + key + "=" + options[key] + "&";
    }
  } else {
    sendError(callback, new Error(ERROR_MESSAGES.optionsNotAnObject));
    return;
  }
  sendRequest(numbersEndpoint, callback);
};

exports.searchNumbers = function (countryCode, pattern, callback) {
  if (!countryCode || countryCode.length !== 2) {
    sendError(callback, new Error(ERROR_MESSAGES.countrycode));
  } else {
    var searchEndpoint = getEndpoint("/number/search");
    searchEndpoint.path += "?country=" + countryCode;
    if (typeof pattern === "function") {
      callback = pattern;
    } else if ((typeof pattern === "undefined" ? "undefined" : _typeof(pattern)) === "object") {
      searchEndpoint.path = searchEndpoint.path + "&";
      for (var arg in pattern) {
        searchEndpoint.path = searchEndpoint.path + arg + "=" + pattern[arg] + "&";
      }
    } else {
      searchEndpoint.path = searchEndpoint.path + "&pattern=" + pattern;
    }
    sendRequest(searchEndpoint, callback);
  }
};

exports.buyNumber = function (countryCode, msisdn, callback) {
  if (!countryCode || countryCode.length !== 2) {
    sendError(callback, new Error(ERROR_MESSAGES.countrycode));
  } else if (!msisdn) {
    sendError(callback, new Error(ERROR_MESSAGES.msisdn));
  } else {
    var buyEndpoint = getEndpoint("/number/buy");
    buyEndpoint.path += "?country=" + countryCode + "&msisdn=" + msisdn;
    sendRequest(buyEndpoint, "POST", callback);
  }
};

exports.cancelNumber = function (countryCode, msisdn, callback) {
  if (!countryCode || countryCode.length !== 2) {
    sendError(callback, new Error(ERROR_MESSAGES.countrycode));
  } else if (!msisdn) {
    sendError(callback, new Error(ERROR_MESSAGES.msisdn));
  } else {
    var cancelEndpoint = getEndpoint("/number/cancel");
    cancelEndpoint.path += "?country=" + countryCode + "&msisdn=" + msisdn;
    sendRequest(cancelEndpoint, "POST", callback);
  }
};

exports.cancelNumber = function (countryCode, msisdn, callback) {
  if (!countryCode || countryCode.length !== 2) {
    sendError(callback, new Error(ERROR_MESSAGES.countrycode));
  } else if (!msisdn) {
    sendError(callback, new Error(ERROR_MESSAGES.msisdn));
  } else {
    var cancelEndpoint = getEndpoint("/number/cancel");
    cancelEndpoint.path += "?country=" + countryCode + "&msisdn=" + msisdn;
    sendRequest(cancelEndpoint, "POST", callback);
  }
};

exports.updateNumber = function (countryCode, msisdn, params, callback) {
  if (!countryCode || countryCode.length !== 2) {
    sendError(callback, new Error(ERROR_MESSAGES.countrycode));
  } else if (!msisdn) {
    sendError(callback, new Error(ERROR_MESSAGES.msisdn));
  } else {
    var updateEndpoint = getEndpoint("/number/update");
    updateEndpoint.path += "?country=" + countryCode + "&msisdn=" + msisdn;
    updateEndpoint.path = updateEndpoint.path + "&";
    for (var arg in params) {
      updateEndpoint.path = updateEndpoint.path + arg + "=" + encodeURIComponent(params[arg]) + "&";
    }
    sendRequest(updateEndpoint, "POST", callback);
  }
};

exports.changePassword = function (newSecret, callback) {
  var settingsEndpoint = getEndpoint("/account/settings");
  settingsEndpoint.path += "?newSecret=" + encodeURIComponent(newSecret);
  sendRequest(settingsEndpoint, "POST", callback);
};

exports.changeMoCallbackUrl = function (newUrl, callback) {
  var settingsEndpoint = getEndpoint("/account/settings");
  settingsEndpoint.path += "?moCallBackUrl=" + encodeURIComponent(newUrl);
  sendRequest(settingsEndpoint, "POST", callback);
};

exports.changeDrCallbackUrl = function (newUrl, callback) {
  var settingsEndpoint = getEndpoint("/account/settings");
  settingsEndpoint.path += "?drCallBackUrl=" + encodeURIComponent(newUrl);
  sendRequest(settingsEndpoint, "POST", callback);
};

exports.verifyNumber = function (inputParams, callback) {
  if (!inputParams.number || !inputParams.brand) {
    sendError(callback, new Error(ERROR_MESSAGES.verifyValidation));
  } else {
    var vEndpoint = clone(verifyEndpoint);
    vEndpoint.path += "?" + querystring.stringify(inputParams);
    sendRequest(vEndpoint, callback);
  }
};

exports.checkVerifyRequest = function (inputParams, callback) {
  if (!inputParams.request_id || !inputParams.code) {
    sendError(callback, new Error(ERROR_MESSAGES.checkVerifyValidation));
  } else {
    var vEndpoint = clone(checkVerifyEndpoint);
    vEndpoint.path += "?" + querystring.stringify(inputParams);
    sendRequest(vEndpoint, callback);
  }
};

exports.controlVerifyRequest = function (inputParams, callback) {
  if (!inputParams.request_id || !inputParams.cmd) {
    sendError(callback, new Error(ERROR_MESSAGES.controlVerifyValidation));
  } else {
    var vEndpoint = clone(controlVerifyEndpoint);
    vEndpoint.path += "?" + querystring.stringify(inputParams);
    sendRequest(vEndpoint, callback);
  }
};

exports.searchVerifyRequest = function (requestIds, callback) {
  var requestIdParam = {};
  if (!requestIds) {
    sendError(callback, new Error(ERROR_MESSAGES.searchVerifyValidation));
  } else {
    if (Array.isArray(requestIds)) {
      if (requestIds.length === 1) {
        requestIdParam.request_id = requestIds;
      } else {
        requestIdParam.request_ids = requestIds;
      }
    } else {
      requestIdParam.request_id = requestIds;
    }
    var vEndpoint = clone(searchVerifyEndpoint);
    vEndpoint.path += "?" + querystring.stringify(requestIdParam);
    sendRequest(vEndpoint, callback);
  }
};

exports.numberInsight = function (inputParams, callback) {
  numberInsightAsync(inputParams, callback);
};

exports.numberInsightBasic = function (inputParams, callback) {
  numberInsightCommon(niBasicEndpoint, inputParams, callback);
};

exports.numberInsightStandard = function (inputParams, callback) {
  numberInsightCommon(niStandardEndpoint, inputParams, callback);
};

exports.numberInsightAdvanced = function (inputParams, callback) {
  numberInsightCommon(niAdvancedEndpoint, inputParams, callback);
};

exports.numberInsightAdvancedAsync = function (inputParams, callback) {
  numberInsightAsync(inputParams, callback);
};

function numberInsightAsync(inputParams, callback) {
  if (!inputParams.number || !inputParams.callback) {
    sendError(callback, new Error(ERROR_MESSAGES.numberInsightAdvancedValidation));
  } else {
    var nEndpoint = clone(niEndpoint);
    nEndpoint.path += "?" + querystring.stringify(inputParams);
    sendRequest(nEndpoint, callback);
  }
}

function numberInsightCommon(endpoint, inputParams, callback) {
  if (validateNumber(inputParams, callback)) {
    var inputObj;
    if ((typeof inputParams === "undefined" ? "undefined" : _typeof(inputParams)) !== "object") {
      inputObj = { number: inputParams };
    } else {
      inputObj = inputParams;
    }
    var nEndpoint = clone(endpoint);
    nEndpoint.path += "?" + querystring.stringify(inputObj);
    sendRequest(nEndpoint, callback);
  }
}
function validateNumber(inputParams, callback) {
  if ((typeof inputParams === "undefined" ? "undefined" : _typeof(inputParams)) === "object" && !inputParams.number) {
    sendError(callback, new Error(ERROR_MESSAGES.numberInsightValidation));
    return false;
  } else if ((typeof inputParams === "undefined" ? "undefined" : _typeof(inputParams)) === "object" && !numberPattern.test(inputParams.number)) {
    sendError(callback, new Error(ERROR_MESSAGES.numberInsightPatternFailure));
    return false;
  } else if ((typeof inputParams === "undefined" ? "undefined" : _typeof(inputParams)) !== "object" && (!inputParams || !numberPattern.test(inputParams))) {
    sendError(callback, new Error(ERROR_MESSAGES.numberInsightPatternFailure));
    return false;
  }
  return true;
}

function sendVoiceMessage(voiceEndpoint, data, callback) {
  if (!data.to) {
    sendError(callback, new Error(ERROR_MESSAGES.to));
  } else {
    var endpoint = clone(voiceEndpoint);
    endpoint.path += "?" + querystring.stringify(data);
    _options.logger.info("sending TTS message to " + data.to + " with message " + data.text);
    sendRequest(endpoint, "POST", function (err, apiResponse) {
      if (!err && apiResponse.status && apiResponse.status > 0) {
        sendError(callback, new Error(apiResponse["error-text"]), apiResponse);
      } else {
        if (callback) callback(err, apiResponse);
      }
    });
  }
}

exports.sendTTSMessage = function (recipient, message, opts, callback) {
  if (!message) {
    sendError(callback, new Error(ERROR_MESSAGES.msg));
  } else {
    if (!opts) {
      opts = {};
    }
    opts["to"] = recipient;
    opts["text"] = message;
    sendVoiceMessage(ttsEndpoint, opts, callback);
  }
};

exports.sendTTSPromptWithCapture = function (recipient, message, maxDigits, byeText, opts, callback) {
  if (!message) {
    sendError(callback, new Error(ERROR_MESSAGES.msg));
  } else if (!maxDigits || isNaN(maxDigits) || maxDigits.length > 16) {
    sendError(callback, new Error(ERROR_MESSAGES.maxDigits));
  } else if (!byeText) {
    sendError(callback, new Error(ERROR_MESSAGES.byeText));
  } else {
    if (!opts) {
      opts = {};
    }
    opts["to"] = recipient;
    opts["text"] = message;
    opts["max_digits"] = maxDigits;
    opts["bye_text"] = byeText;
    sendVoiceMessage(ttsPromptEndpoint, opts, callback);
  }
};

exports.sendTTSPromptWithConfirm = function (recipient, message, maxDigits, pinCode, byeText, failedText, opts, callback) {
  if (!message) {
    sendError(callback, new Error(ERROR_MESSAGES.msg));
  } else if (!maxDigits || isNaN(maxDigits) || maxDigits.length > 16) {
    sendError(callback, new Error(ERROR_MESSAGES.maxDigits));
  } else if (!pinCode || pinCode.length !== maxDigits) {
    sendError(callback, new Error(ERROR_MESSAGES.pinCode));
  } else if (!byeText) {
    sendError(callback, new Error(ERROR_MESSAGES.byeText));
  } else if (!failedText) {
    sendError(callback, new Error(ERROR_MESSAGES.failedText));
  } else {
    if (!opts) {
      opts = {};
    }
    opts["to"] = recipient;
    opts["text"] = message;
    opts["max_digits"] = maxDigits;
    opts["pin_code"] = pinCode;
    opts["bye_text"] = byeText;
    opts["failed_text"] = failedText;
    sendVoiceMessage(ttsPromptEndpoint, opts, callback);
  }
};

exports.call = function (recipient, answerUrl, opts, callback) {
  if (!answerUrl) {
    sendError(callback, new Error(ERROR_MESSAGES.answerUrl));
  } else {
    if (!opts) {
      opts = {};
    }
    opts["to"] = recipient;
    opts["answer_url"] = answerUrl;
    sendVoiceMessage(callEndpoint, opts, callback);
  }
};

function sendError(callback, err, returnData) {
  // Throw the error in case if there is no callback passed
  if (callback) {
    callback(err, returnData);
  } else {
    throw err;
  }
}

exports.setHost = function (aHost) {
  msgpath.host = aHost;
  shortcodePath.host = aHost;
  ttsEndpoint.host = aHost;
  ttsPromptEndpoint.host = aHost;
  callEndpoint.host = aHost;
  verifyEndpoint.host = aHost;
  checkVerifyEndpoint.host = aHost;
  controlVerifyEndpoint.host = aHost;
  searchVerifyEndpoint.host = aHost;
  niEndpoint.host = aHost;
  niBasicEndpoint.host = aHost;
  niStandardEndpoint.host = aHost;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJxdWVyeXN0cmluZyIsInJlcXVpcmUiLCJtc2dwYXRoIiwiaG9zdCIsInBhdGgiLCJzaG9ydGNvZGVQYXRoIiwidHRzRW5kcG9pbnQiLCJ0dHNQcm9tcHRFbmRwb2ludCIsImNhbGxFbmRwb2ludCIsInZlcmlmeUVuZHBvaW50IiwiY2hlY2tWZXJpZnlFbmRwb2ludCIsImNvbnRyb2xWZXJpZnlFbmRwb2ludCIsInNlYXJjaFZlcmlmeUVuZHBvaW50IiwibmlFbmRwb2ludCIsIm5pQmFzaWNFbmRwb2ludCIsIm5pU3RhbmRhcmRFbmRwb2ludCIsIm5pQWR2YW5jZWRFbmRwb2ludCIsInVwIiwibnVtYmVyUGF0dGVybiIsIlJlZ0V4cCIsIl9vcHRpb25zIiwiRVJST1JfTUVTU0FHRVMiLCJzZW5kZXIiLCJ0byIsIm1zZyIsIm1zZ1BhcmFtcyIsImNvdW50cnljb2RlIiwibXNpc2RuIiwiYm9keSIsInVkaCIsInRpdGxlIiwidXJsIiwibWF4RGlnaXRzIiwiYnllVGV4dCIsInBpbkNvZGUiLCJmYWlsZWRUZXh0IiwiYW5zd2VyVXJsIiwidmVyaWZ5VmFsaWRhdGlvbiIsImNoZWNrVmVyaWZ5VmFsaWRhdGlvbiIsImNvbnRyb2xWZXJpZnlWYWxpZGF0aW9uIiwic2VhcmNoVmVyaWZ5VmFsaWRhdGlvbiIsIm51bWJlckluc2lnaHRBZHZhbmNlZFZhbGlkYXRpb24iLCJudW1iZXJJbnNpZ2h0VmFsaWRhdGlvbiIsIm51bWJlckluc2lnaHRQYXR0ZXJuRmFpbHVyZSIsIm9wdGlvbnNOb3RBbk9iamVjdCIsInByb2R1Y3QiLCJleHBvcnRzIiwiaW5pdGlhbGl6ZSIsInBrZXkiLCJwc2VjcmV0Iiwib3B0aW9ucyIsImFwaV9rZXkiLCJhcGlfc2VjcmV0Iiwic2VuZEJpbmFyeU1lc3NhZ2UiLCJyZWNpcGllbnQiLCJjYWxsYmFjayIsInNlbmRFcnJvciIsIkVycm9yIiwic2VuZE1lc3NhZ2UiLCJmcm9tIiwidHlwZSIsInNlbmRXYXBQdXNoTWVzc2FnZSIsInZhbGlkaXR5Iiwic2VuZFRleHRNZXNzYWdlIiwibWVzc2FnZSIsIm9wdHMiLCJkYXRhIiwiY2xvbmUiLCJzdHJpbmdpZnkiLCJsb2dnZXIiLCJpbmZvIiwidGV4dCIsInNlbmRSZXF1ZXN0IiwiZXJyIiwiYXBpUmVzcG9uc2UiLCJzdGF0dXMiLCJtZXNzYWdlcyIsInNlbmRWaWFTaG9ydGNvZGUiLCJtZXNzYWdlUGFyYW1zIiwiT2JqZWN0Iiwia2V5cyIsInJlcGxhY2UiLCJmb3JFYWNoIiwia2V5IiwiSlNPTiIsInNob3J0Y29kZUFsZXJ0Iiwic2hvcnRjb2RlMkZBIiwic2hvcnRjb2RlTWFya2V0aW5nIiwiYSIsInBhcnNlIiwiZ2V0RW5kcG9pbnQiLCJhY3Rpb24iLCJlbmRwb2ludCIsIm1ldGhvZCIsImluZGV4T2YiLCJodHRwQ2xpZW50IiwicmVxdWVzdCIsImNoZWNrQmFsYW5jZSIsImJhbGFuY2VFbmRwb2ludCIsImdldFByaWNpbmciLCJjb3VudHJ5Q29kZSIsImxlbmd0aCIsInByaWNpbmdFbmRwb2ludCIsImdldFBob25lUHJpY2luZyIsImdldE51bWJlcnMiLCJudW1iZXJzRW5kcG9pbnQiLCJzZWFyY2hOdW1iZXJzIiwicGF0dGVybiIsInNlYXJjaEVuZHBvaW50IiwiYXJnIiwiYnV5TnVtYmVyIiwiYnV5RW5kcG9pbnQiLCJjYW5jZWxOdW1iZXIiLCJjYW5jZWxFbmRwb2ludCIsInVwZGF0ZU51bWJlciIsInBhcmFtcyIsInVwZGF0ZUVuZHBvaW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2hhbmdlUGFzc3dvcmQiLCJuZXdTZWNyZXQiLCJzZXR0aW5nc0VuZHBvaW50IiwiY2hhbmdlTW9DYWxsYmFja1VybCIsIm5ld1VybCIsImNoYW5nZURyQ2FsbGJhY2tVcmwiLCJ2ZXJpZnlOdW1iZXIiLCJpbnB1dFBhcmFtcyIsIm51bWJlciIsImJyYW5kIiwidkVuZHBvaW50IiwiY2hlY2tWZXJpZnlSZXF1ZXN0IiwicmVxdWVzdF9pZCIsImNvZGUiLCJjb250cm9sVmVyaWZ5UmVxdWVzdCIsImNtZCIsInNlYXJjaFZlcmlmeVJlcXVlc3QiLCJyZXF1ZXN0SWRzIiwicmVxdWVzdElkUGFyYW0iLCJBcnJheSIsImlzQXJyYXkiLCJyZXF1ZXN0X2lkcyIsIm51bWJlckluc2lnaHQiLCJudW1iZXJJbnNpZ2h0QXN5bmMiLCJudW1iZXJJbnNpZ2h0QmFzaWMiLCJudW1iZXJJbnNpZ2h0Q29tbW9uIiwibnVtYmVySW5zaWdodFN0YW5kYXJkIiwibnVtYmVySW5zaWdodEFkdmFuY2VkIiwibnVtYmVySW5zaWdodEFkdmFuY2VkQXN5bmMiLCJuRW5kcG9pbnQiLCJ2YWxpZGF0ZU51bWJlciIsImlucHV0T2JqIiwidGVzdCIsInNlbmRWb2ljZU1lc3NhZ2UiLCJ2b2ljZUVuZHBvaW50Iiwic2VuZFRUU01lc3NhZ2UiLCJzZW5kVFRTUHJvbXB0V2l0aENhcHR1cmUiLCJpc05hTiIsInNlbmRUVFNQcm9tcHRXaXRoQ29uZmlybSIsImNhbGwiLCJyZXR1cm5EYXRhIiwic2V0SG9zdCIsImFIb3N0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQUlBLGNBQWNDLFFBQVEsYUFBUixDQUFsQjs7QUFFQSxJQUFJQyxVQUFVLEVBQUVDLE1BQU0sZ0JBQVIsRUFBMEJDLE1BQU0sV0FBaEMsRUFBZDtBQUNBLElBQUlDLGdCQUFnQixFQUFFRixNQUFNLGdCQUFSLEVBQTBCQyxNQUFNLHFCQUFoQyxFQUFwQjtBQUNBLElBQUlFLGNBQWMsRUFBRUgsTUFBTSxlQUFSLEVBQXlCQyxNQUFNLFdBQS9CLEVBQWxCO0FBQ0EsSUFBSUcsb0JBQW9CLEVBQUVKLE1BQU0sZUFBUixFQUF5QkMsTUFBTSxrQkFBL0IsRUFBeEI7QUFDQSxJQUFJSSxlQUFlLEVBQUVMLE1BQU0sZ0JBQVIsRUFBMEJDLE1BQU0sWUFBaEMsRUFBbkI7QUFDQSxJQUFJSyxpQkFBaUIsRUFBRU4sTUFBTSxlQUFSLEVBQXlCQyxNQUFNLGNBQS9CLEVBQXJCO0FBQ0EsSUFBSU0sc0JBQXNCLEVBQUVQLE1BQU0s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QixFQUFxQ1YsUUFBckM7QUFDRDtBQUNGLENBWEQ7O0FBYUEsU0FBU0MsU0FBVCxDQUFtQkQsUUFBbkIsRUFBNkJrQixHQUE3QixFQUFrQ3FGLFVBQWxDLEVBQThDO0FBQzVDO0FBQ0EsTUFBSXZHLFFBQUosRUFBYztBQUNaQSxhQUFTa0IsR0FBVCxFQUFjcUYsVUFBZDtBQUNELEdBRkQsTUFFTztBQUNMLFVBQU1yRixHQUFOO0FBQ0Q7QUFDRjs7QUFFRDNCLFFBQVFpSCxPQUFSLEdBQWtCLFVBQVNDLEtBQVQsRUFBZ0I7QUFDaEM5SixVQUFRQyxJQUFSLEdBQWU2SixLQUFmO0FBQ0EzSixnQkFBY0YsSUFBZCxHQUFxQjZKLEtBQXJCO0FBQ0ExSixjQUFZSCxJQUFaLEdBQW1CNkosS0FBbkI7QUFDQXpKLG9CQUFrQkosSUFBbEIsR0FBeUI2SixLQUF6QjtBQUNBeEosZUFBYUwsSUFBYixHQUFvQjZKLEtBQXBCO0FBQ0F2SixpQkFBZU4sSUFBZixHQUFzQjZKLEtBQXRCO0FBQ0F0SixzQkFBb0JQLElBQXBCLEdBQTJCNkosS0FBM0I7QUFDQXJKLHdCQUFzQlIsSUFBdEIsR0FBNkI2SixLQUE3QjtBQUNBcEosdUJBQXFCVCxJQUFyQixHQUE0QjZKLEtBQTVCO0FBQ0FuSixhQUFXVixJQUFYLEdBQWtCNkosS0FBbEI7QUFDQWxKLGtCQUFnQlgsSUFBaEIsR0FBdUI2SixLQUF2QjtBQUNBakoscUJBQW1CWixJQUFuQixHQUEwQjZKLEtBQTFCO0FBQ0QsQ0FiRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcXVlcnlzdHJpbmcgPSByZXF1aXJlKFwicXVlcnlzdHJpbmdcIik7XG5cbnZhciBtc2dwYXRoID0geyBob3N0OiBcInJlc3QubmV4bW8uY29tXCIsIHBhdGg6IFwiL3Ntcy9qc29uXCIgfTtcbnZhciBzaG9ydGNvZGVQYXRoID0geyBob3N0OiBcInJlc3QubmV4bW8uY29tXCIsIHBhdGg6IFwiL3NjL3VzLyR7dHlwZX0vanNvblwiIH07XG52YXIgdHRzRW5kcG9pbnQgPSB7IGhvc3Q6IFwiYXBpLm5leG1vLmNvbVwiLCBwYXRoOiBcIi90dHMvanNvblwiIH07XG52YXIgdHRzUHJvbXB0RW5kcG9pbnQgPSB7IGhvc3Q6IFwiYXBpLm5leG1vLmNvbVwiLCBwYXRoOiBcIi90dHMtcHJvbXB0L2pzb25cIiB9O1xudmFyIGNhbGxFbmRwb2ludCA9IHsgaG9zdDogXCJyZXN0Lm5leG1vLmNvbVwiLCBwYXRoOiBcIi9jYWxsL2pzb25cIiB9O1xudmFyIHZlcmlmeUVuZHBvaW50ID0geyBob3N0OiBcImFwaS5uZXhtby5jb21cIiwgcGF0aDogXCIvdmVyaWZ5L2pzb25cIiB9O1xudmFyIGNoZWNrVmVyaWZ5RW5kcG9pbnQgPSB7IGhvc3Q6IFwiYXBpLm5leG1vLmNvbVwiLCBwYXRoOiBcIi92ZXJpZnkvY2hlY2svanNvblwiIH07XG52YXIgY29udHJvbFZlcmlmeUVuZHBvaW50ID0ge1xuICBob3N0OiBcImFwaS5uZXhtby5jb21cIixcbiAgcGF0aDogXCIvdmVyaWZ5L2NvbnRyb2wvanNvblwiXG59O1xudmFyIHNlYXJjaFZlcmlmeUVuZHBvaW50ID0ge1xuICBob3N0OiBcImFwaS5uZXhtby5jb21cIixcbiAgcGF0aDogXCIvdmVyaWZ5L3NlYXJjaC9qc29uXCJcbn07XG52YXIgbmlFbmRwb2ludCA9IHsgaG9zdDogXCJhcGkubmV4bW8uY29tXCIsIHBhdGg6IFwiL25pL2FkdmFuY2VkL2FzeW5jL2pzb25cIiB9O1xudmFyIG5pQmFzaWNFbmRwb2ludCA9IHsgaG9zdDogXCJhcGkubmV4bW8uY29tXCIsIHBhdGg6IFwiL25pL2Jhc2ljL2pzb25cIiB9O1xudmFyIG5pU3RhbmRhcmRFbmRwb2ludCA9IHsgaG9zdDogXCJhcGkubmV4bW8uY29tXCIsIHBhdGg6IFwiL25pL3N0YW5kYXJkL2pzb25cIiB9O1xudmFyIG5pQWR2YW5jZWRFbmRwb2ludCA9IHsgaG9zdDogXCJhcGkubmV4bW8uY29tXCIsIHBhdGg6IFwiL25pL2FkdmFuY2VkL2pzb25cIiB9O1xudmFyIHVwID0ge307XG52YXIgbnVtYmVyUGF0dGVybiA9IG5ldyBSZWdFeHAoXCJeWzAtOSArKCktXSokXCIpO1xuXG52YXIgX29wdGlvbnMgPSBudWxsO1xuXG4vLyBFcnJvciBtZXNzYWdlIHJlc291cmNlcyBhcmUgbWFpbnRhaW5lZCBnbG9iYWxseSBpbiBvbmUgcGxhY2UgZm9yIGVhc3kgbWFuYWdlbWVudFxudmFyIEVSUk9SX01FU1NBR0VTID0ge1xuICBzZW5kZXI6IFwiSW52YWxpZCBmcm9tIGFkZHJlc3NcIixcbiAgdG86IFwiSW52YWxpZCB0byBhZGRyZXNzXCIsXG4gIG1zZzogXCJJbnZhbGlkIFRleHQgTWVzc2FnZVwiLFxuICBtc2dQYXJhbXM6IFwiSW52YWxpZCBzaG9ydGNvZGUgbWVzc2FnZSBwYXJhbWV0ZXJzXCIsXG4gIGNvdW50cnljb2RlOiBcIkludmFsaWQgQ291bnRyeSBDb2RlXCIsXG4gIG1zaXNkbjogXCJJbnZhbGlkIE1TSVNETiBwYXNzZWRcIixcbiAgYm9keTogXCJJbnZhbGlkIEJvZHkgdmFsdWUgaW4gQmluYXJ5IE1lc3NhZ2VcIixcbiAgdWRoOiBcIkludmFsaWQgdWRoIHZhbHVlIGluIEJpbmFyeSBNZXNzYWdlXCIsXG4gIHRpdGxlOiBcIkludmFsaWQgdGl0bGUgaW4gV0FQIFB1c2ggbWVzc2FnZVwiLFxuICB1cmw6IFwiSW52YWxpZCB1cmwgaW4gV0FQIFB1c2ggbWVzc2FnZVwiLFxuICBtYXhEaWdpdHM6IFwiSW52YWxpZCBtYXggZGlnaXRzIGZvciBUVFMgcHJvbXB0XCIsXG4gIGJ5ZVRleHQ6IFwiSW52YWxpZCBieWUgdGV4dCBmb3IgVFRTIHByb21wdFwiLFxuICBwaW5Db2RlOiBcIkludmFsaWQgcGluIGNvZGUgZm9yIFRUUyBjb25maXJtXCIsXG4gIGZhaWxlZFRleHQ6IFwiSW52YWxpZCBmYWlsZWQgdGV4dCBmb3IgVFRTIGNvbmZpcm1cIixcbiAgYW5zd2VyVXJsOiBcIkludmFsaWQgYW5zd2VyIFVSTCBmb3IgY2FsbFwiLFxuICB2ZXJpZnlWYWxpZGF0aW9uOiBcIk1pc3NpbmcgTWFuZGF0b3J5IGZpZWxkcyAobnVtYmVyIGFuZC9vciBicmFuZClcIixcbiAgY2hlY2tWZXJpZnlWYWxpZGF0aW9uOiBcIk1pc3NpbmcgTWFuZGF0b3J5IGZpZWxkcyAocmVxdWVzdF9pZCBhbmQvb3IgY29kZSlcIixcbiAgY29udHJvbFZlcmlmeVZhbGlkYXRpb246XG4gICAgXCJNaXNzaW5nIE1hbmRhdG9yeSBmaWVsZHMgKHJlcXVlc3RfaWQgYW5kL29yIGNtZC1jb21tYW5kKVwiLFxuICBzZWFyY2hWZXJpZnlWYWxpZGF0aW9uOlxuICAgIFwiTWlzc2luZyBNYW5kYXRvcnkgZmllbGRzIChyZXF1ZXN0X2lkIG9yIHJlcXVlc3RfaWRzKVwiLFxuICBudW1iZXJJbnNpZ2h0QWR2YW5jZWRWYWxpZGF0aW9uOlxuICAgIFwiTWlzc2luZyBNYW5kYXRvcnkgZmllbGRzIChudW1iZXIgYW5kL29yIGNhbGxiYWNrIHVybClcIixcbiAgbnVtYmVySW5zaWdodFZhbGlkYXRpb246IFwiTWlzc2luZyBNYW5kYXRvcnkgZmllbGQgLSBudW1iZXJcIixcbiAgbnVtYmVySW5zaWdodFBhdHRlcm5GYWlsdXJlOlxuICAgIFwiTnVtYmVyIGNhbiBjb250YWluIGRpZ2l0cyBhbmQgbWF5IGluY2x1ZGUgYW55IG9yIGFsbCBvZiB0aGUgZm9sbG93aW5nOiB3aGl0ZSBzcGFjZSwgLSwrLCAoLCApLlwiLFxuICBvcHRpb25zTm90QW5PYmplY3Q6XG4gICAgXCJPcHRpb25zIHBhcmFtZXRlciBzaG91bGQgYmUgYSBkaWN0aW9uYXJ5LiBDaGVjayB0aGUgZG9jcyBmb3IgdmFsaWQgcHJvcGVydGllcyBmb3Igb3B0aW9uc1wiLFxuICBwcm9kdWN0OiBcIkludmFsaWQgcHJvZHVjdC4gU2hvdWxkIGJlIG9uZSBvZiBbdm9pY2UsIHNtc11cIlxufTtcblxuZXhwb3J0cy5pbml0aWFsaXplID0gZnVuY3Rpb24ocGtleSwgcHNlY3JldCwgb3B0aW9ucykge1xuICBpZiAoIXBrZXkgfHwgIXBzZWNyZXQpIHtcbiAgICB0aHJvdyBcImtleSBhbmQgc2VjcmV0IGNhbm5vdCBiZSBlbXB0eSwgc2V0IHZhbGlkIHZhbHVlc1wiO1xuICB9XG4gIHVwID0ge1xuICAgIGFwaV9rZXk6IHBrZXksXG4gICAgYXBpX3NlY3JldDogcHNlY3JldFxuICB9O1xuICBfb3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5leHBvcnRzLnNlbmRCaW5hcnlNZXNzYWdlID0gZnVuY3Rpb24oc2VuZGVyLCByZWNpcGllbnQsIGJvZHksIHVkaCwgY2FsbGJhY2spIHtcbiAgaWYgKCFib2R5KSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMuYm9keSkpO1xuICB9IGVsc2UgaWYgKCF1ZGgpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy51ZGgpKTtcbiAgfSBlbHNlIHtcbiAgICBzZW5kTWVzc2FnZShcbiAgICAgIHtcbiAgICAgICAgZnJvbTogc2VuZGVyLFxuICAgICAgICB0bzogcmVjaXBpZW50LFxuICAgICAgICB0eXBlOiBcImJpbmFyeVwiLFxuICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICB1ZGg6IHVkaFxuICAgICAgfSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0cy5zZW5kV2FwUHVzaE1lc3NhZ2UgPSBmdW5jdGlvbihcbiAgc2VuZGVyLFxuICByZWNpcGllbnQsXG4gIHRpdGxlLFxuICB1cmwsXG4gIHZhbGlkaXR5LFxuICBjYWxsYmFja1xuKSB7XG4gIGlmICghdGl0bGUpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy50aXRsZSkpO1xuICB9IGVsc2UgaWYgKCF1cmwpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy51cmwpKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHZhbGlkaXR5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNhbGxiYWNrID0gdmFsaWRpdHk7XG4gICAgICB2YWxpZGl0eSA9IDg2NDAwMDAwO1xuICAgIH1cbiAgICBzZW5kTWVzc2FnZShcbiAgICAgIHtcbiAgICAgICAgZnJvbTogc2VuZGVyLFxuICAgICAgICB0bzogcmVjaXBpZW50LFxuICAgICAgICB0eXBlOiBcIndhcHB1c2hcIixcbiAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICB2YWxpZGl0eTogdmFsaWRpdHksXG4gICAgICAgIHVybDogdXJsXG4gICAgICB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnRzLnNlbmRUZXh0TWVzc2FnZSA9IGZ1bmN0aW9uKHNlbmRlciwgcmVjaXBpZW50LCBtZXNzYWdlLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAoIW1lc3NhZ2UpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5tc2cpKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIG9wdHNbXCJmcm9tXCJdID0gc2VuZGVyO1xuICAgIG9wdHNbXCJ0b1wiXSA9IHJlY2lwaWVudDtcbiAgICBvcHRzW1widGV4dFwiXSA9IG1lc3NhZ2U7XG4gICAgc2VuZE1lc3NhZ2Uob3B0cywgY2FsbGJhY2spO1xuICB9XG59O1xuXG5leHBvcnRzLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24ob3B0cywgY2FsbGJhY2spIHtcbiAgc2VuZE1lc3NhZ2Uob3B0cywgY2FsbGJhY2spO1xufTtcbmZ1bmN0aW9uIHNlbmRNZXNzYWdlKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGlmICghZGF0YS5mcm9tKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMuc2VuZGVyKSk7XG4gIH0gZWxzZSBpZiAoIWRhdGEudG8pIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy50bykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXRoID0gY2xvbmUobXNncGF0aCk7XG4gICAgcGF0aC5wYXRoICs9IFwiP1wiICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KGRhdGEpO1xuICAgIF9vcHRpb25zLmxvZ2dlci5pbmZvKFxuICAgICAgXCJzZW5kaW5nIG1lc3NhZ2UgZnJvbSBcIiArXG4gICAgICAgIGRhdGEuZnJvbSArXG4gICAgICAgIFwiIHRvIFwiICtcbiAgICAgICAgZGF0YS50byArXG4gICAgICAgIFwiIHdpdGggbWVzc2FnZSBcIiArXG4gICAgICAgIGRhdGEudGV4dFxuICAgICk7XG4gICAgc2VuZFJlcXVlc3QocGF0aCwgXCJQT1NUXCIsIGZ1bmN0aW9uKGVyciwgYXBpUmVzcG9uc2UpIHtcbiAgICAgIGlmICghZXJyICYmIGFwaVJlc3BvbnNlLnN0YXR1cyAmJiBhcGlSZXNwb25zZS5tZXNzYWdlc1swXS5zdGF0dXMgPiAwKSB7XG4gICAgICAgIHNlbmRFcnJvcihcbiAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICBuZXcgRXJyb3IoYXBpUmVzcG9uc2UubWVzc2FnZXNbMF1bXCJlcnJvci10ZXh0XCJdKSxcbiAgICAgICAgICBhcGlSZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIsIGFwaVJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZW5kVmlhU2hvcnRjb2RlKHR5cGUsIHJlY2lwaWVudCwgbWVzc2FnZVBhcmFtcywgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFyZWNpcGllbnQpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy50bykpO1xuICB9XG4gIGlmICghbWVzc2FnZVBhcmFtcyB8fCAhT2JqZWN0LmtleXMobWVzc2FnZVBhcmFtcykpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5tc2dQYXJhbXMpKTtcbiAgfVxuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdmFyIHBhdGggPSBjbG9uZShzaG9ydGNvZGVQYXRoKTtcbiAgcGF0aC5wYXRoID0gcGF0aC5wYXRoLnJlcGxhY2UoXCIke3R5cGV9XCIsIHR5cGUpO1xuICBPYmplY3Qua2V5cyhtZXNzYWdlUGFyYW1zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIG9wdHNba2V5XSA9IG1lc3NhZ2VQYXJhbXNba2V5XTtcbiAgfSk7XG4gIG9wdHMudG8gPSByZWNpcGllbnQ7XG4gIHBhdGgucGF0aCArPSBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShvcHRzKTtcbiAgX29wdGlvbnMubG9nZ2VyLmluZm8oXG4gICAgXCJzZW5kaW5nIG1lc3NhZ2UgZnJvbSBzaG9ydGNvZGUgXCIgK1xuICAgICAgdHlwZSArXG4gICAgICBcIiB0byBcIiArXG4gICAgICByZWNpcGllbnQgK1xuICAgICAgXCIgd2l0aCBwYXJhbWV0ZXJzIFwiICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2VQYXJhbXMpXG4gICk7XG4gIHNlbmRSZXF1ZXN0KHBhdGgsIFwiUE9TVFwiLCBmdW5jdGlvbihlcnIsIGFwaVJlc3BvbnNlKSB7XG4gICAgaWYgKCFlcnIgJiYgYXBpUmVzcG9uc2Uuc3RhdHVzICYmIGFwaVJlc3BvbnNlLm1lc3NhZ2VzWzBdLnN0YXR1cyA+IDApIHtcbiAgICAgIHNlbmRFcnJvcihcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG5ldyBFcnJvcihhcGlSZXNwb25zZS5tZXNzYWdlc1swXVtcImVycm9yLXRleHRcIl0pLFxuICAgICAgICBhcGlSZXNwb25zZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIsIGFwaVJlc3BvbnNlKTtcbiAgICB9XG4gIH0pO1xufVxuZXhwb3J0cy5zaG9ydGNvZGVBbGVydCA9IGZ1bmN0aW9uKHJlY2lwaWVudCwgbWVzc2FnZVBhcmFtcywgb3B0cywgY2FsbGJhY2spIHtcbiAgc2VuZFZpYVNob3J0Y29kZShcImFsZXJ0XCIsIHJlY2lwaWVudCwgbWVzc2FnZVBhcmFtcywgb3B0cywgY2FsbGJhY2spO1xufTtcbmV4cG9ydHMuc2hvcnRjb2RlMkZBID0gZnVuY3Rpb24ocmVjaXBpZW50LCBtZXNzYWdlUGFyYW1zLCBvcHRzLCBjYWxsYmFjaykge1xuICBzZW5kVmlhU2hvcnRjb2RlKFwiMmZhXCIsIHJlY2lwaWVudCwgbWVzc2FnZVBhcmFtcywgb3B0cywgY2FsbGJhY2spO1xufTtcbmV4cG9ydHMuc2hvcnRjb2RlTWFya2V0aW5nID0gZnVuY3Rpb24oXG4gIHJlY2lwaWVudCxcbiAgbWVzc2FnZVBhcmFtcyxcbiAgb3B0cyxcbiAgY2FsbGJhY2tcbikge1xuICBzZW5kVmlhU2hvcnRjb2RlKFwibWFya2V0aW5nXCIsIHJlY2lwaWVudCwgbWVzc2FnZVBhcmFtcywgb3B0cywgY2FsbGJhY2spO1xufTtcblxuZnVuY3Rpb24gY2xvbmUoYSkge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhKSk7XG59XG5cbmZ1bmN0aW9uIGdldEVuZHBvaW50KGFjdGlvbikge1xuICByZXR1cm4geyBwYXRoOiBhY3Rpb24gfTtcbn1cblxuZnVuY3Rpb24gc2VuZFJlcXVlc3QoZW5kcG9pbnQsIG1ldGhvZCwgY2FsbGJhY2spIHtcbiAgZW5kcG9pbnQucGF0aCA9XG4gICAgZW5kcG9pbnQucGF0aCArXG4gICAgKGVuZHBvaW50LnBhdGguaW5kZXhPZihcIj9cIikgPiAwID8gXCImXCIgOiBcIj9cIikgK1xuICAgIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh1cCk7XG4gIF9vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChlbmRwb2ludCwgbWV0aG9kLCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydHMuY2hlY2tCYWxhbmNlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIGJhbGFuY2VFbmRwb2ludCA9IGdldEVuZHBvaW50KFwiL2FjY291bnQvZ2V0LWJhbGFuY2VcIik7XG4gIHNlbmRSZXF1ZXN0KGJhbGFuY2VFbmRwb2ludCwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5nZXRQcmljaW5nID0gZnVuY3Rpb24oY291bnRyeUNvZGUsIGNhbGxiYWNrKSB7XG4gIGlmICghY291bnRyeUNvZGUgfHwgY291bnRyeUNvZGUubGVuZ3RoICE9PSAyKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMuY291bnRyeWNvZGUpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcHJpY2luZ0VuZHBvaW50ID0gZ2V0RW5kcG9pbnQoXCIvYWNjb3VudC9nZXQtcHJpY2luZy9vdXRib3VuZFwiKTtcbiAgICBwcmljaW5nRW5kcG9pbnQucGF0aCArPSBcIj9jb3VudHJ5PVwiICsgY291bnRyeUNvZGU7XG4gICAgc2VuZFJlcXVlc3QocHJpY2luZ0VuZHBvaW50LCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbmV4cG9ydHMuZ2V0UGhvbmVQcmljaW5nID0gZnVuY3Rpb24ocHJvZHVjdCwgbXNpc2RuLCBjYWxsYmFjaykge1xuICBpZiAoIXByb2R1Y3QgfHwgKHByb2R1Y3QgIT09IFwic21zXCIgJiYgcHJvZHVjdCAhPT0gXCJ2b2ljZVwiKSkge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLnByb2R1Y3QpKTtcbiAgfSBlbHNlIGlmICghbXNpc2RuKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMubXNpc2RuKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHByaWNpbmdFbmRwb2ludCA9IGdldEVuZHBvaW50KFwiL2FjY291bnQvZ2V0LXBob25lLXByaWNpbmcvb3V0Ym91bmRcIik7XG4gICAgcHJpY2luZ0VuZHBvaW50LnBhdGggKz1cbiAgICAgIFwiL1wiICsgcHJvZHVjdCArIFwiL1wiICsgdXAuYXBpX2tleSArIFwiL1wiICsgdXAuYXBpX3NlY3JldCArIFwiL1wiICsgbXNpc2RuO1xuICAgIHNlbmRSZXF1ZXN0KHByaWNpbmdFbmRwb2ludCwgY2FsbGJhY2spO1xuICB9XG59O1xuXG5leHBvcnRzLmdldE51bWJlcnMgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgbnVtYmVyc0VuZHBvaW50ID0gZ2V0RW5kcG9pbnQoXCIvYWNjb3VudC9udW1iZXJzXCIpO1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgIG51bWJlcnNFbmRwb2ludC5wYXRoID0gbnVtYmVyc0VuZHBvaW50LnBhdGggKyBcIj9cIjtcbiAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgbnVtYmVyc0VuZHBvaW50LnBhdGggPVxuICAgICAgICBudW1iZXJzRW5kcG9pbnQucGF0aCArIGtleSArIFwiPVwiICsgb3B0aW9uc1trZXldICsgXCImXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLm9wdGlvbnNOb3RBbk9iamVjdCkpO1xuICAgIHJldHVybjtcbiAgfVxuICBzZW5kUmVxdWVzdChudW1iZXJzRW5kcG9pbnQsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMuc2VhcmNoTnVtYmVycyA9IGZ1bmN0aW9uKGNvdW50cnlDb2RlLCBwYXR0ZXJuLCBjYWxsYmFjaykge1xuICBpZiAoIWNvdW50cnlDb2RlIHx8IGNvdW50cnlDb2RlLmxlbmd0aCAhPT0gMikge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLmNvdW50cnljb2RlKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNlYXJjaEVuZHBvaW50ID0gZ2V0RW5kcG9pbnQoXCIvbnVtYmVyL3NlYXJjaFwiKTtcbiAgICBzZWFyY2hFbmRwb2ludC5wYXRoICs9IFwiP2NvdW50cnk9XCIgKyBjb3VudHJ5Q29kZTtcbiAgICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2FsbGJhY2sgPSBwYXR0ZXJuO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHNlYXJjaEVuZHBvaW50LnBhdGggPSBzZWFyY2hFbmRwb2ludC5wYXRoICsgXCImXCI7XG4gICAgICBmb3IgKHZhciBhcmcgaW4gcGF0dGVybikge1xuICAgICAgICBzZWFyY2hFbmRwb2ludC5wYXRoID1cbiAgICAgICAgICBzZWFyY2hFbmRwb2ludC5wYXRoICsgYXJnICsgXCI9XCIgKyBwYXR0ZXJuW2FyZ10gKyBcIiZcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VhcmNoRW5kcG9pbnQucGF0aCA9IHNlYXJjaEVuZHBvaW50LnBhdGggKyBcIiZwYXR0ZXJuPVwiICsgcGF0dGVybjtcbiAgICB9XG4gICAgc2VuZFJlcXVlc3Qoc2VhcmNoRW5kcG9pbnQsIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuZXhwb3J0cy5idXlOdW1iZXIgPSBmdW5jdGlvbihjb3VudHJ5Q29kZSwgbXNpc2RuLCBjYWxsYmFjaykge1xuICBpZiAoIWNvdW50cnlDb2RlIHx8IGNvdW50cnlDb2RlLmxlbmd0aCAhPT0gMikge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLmNvdW50cnljb2RlKSk7XG4gIH0gZWxzZSBpZiAoIW1zaXNkbikge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLm1zaXNkbikpO1xuICB9IGVsc2Uge1xuICAgIHZhciBidXlFbmRwb2ludCA9IGdldEVuZHBvaW50KFwiL251bWJlci9idXlcIik7XG4gICAgYnV5RW5kcG9pbnQucGF0aCArPSBcIj9jb3VudHJ5PVwiICsgY291bnRyeUNvZGUgKyBcIiZtc2lzZG49XCIgKyBtc2lzZG47XG4gICAgc2VuZFJlcXVlc3QoYnV5RW5kcG9pbnQsIFwiUE9TVFwiLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbmV4cG9ydHMuY2FuY2VsTnVtYmVyID0gZnVuY3Rpb24oY291bnRyeUNvZGUsIG1zaXNkbiwgY2FsbGJhY2spIHtcbiAgaWYgKCFjb3VudHJ5Q29kZSB8fCBjb3VudHJ5Q29kZS5sZW5ndGggIT09IDIpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5jb3VudHJ5Y29kZSkpO1xuICB9IGVsc2UgaWYgKCFtc2lzZG4pIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5tc2lzZG4pKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY2FuY2VsRW5kcG9pbnQgPSBnZXRFbmRwb2ludChcIi9udW1iZXIvY2FuY2VsXCIpO1xuICAgIGNhbmNlbEVuZHBvaW50LnBhdGggKz0gXCI/Y291bnRyeT1cIiArIGNvdW50cnlDb2RlICsgXCImbXNpc2RuPVwiICsgbXNpc2RuO1xuICAgIHNlbmRSZXF1ZXN0KGNhbmNlbEVuZHBvaW50LCBcIlBPU1RcIiwgY2FsbGJhY2spO1xuICB9XG59O1xuXG5leHBvcnRzLmNhbmNlbE51bWJlciA9IGZ1bmN0aW9uKGNvdW50cnlDb2RlLCBtc2lzZG4sIGNhbGxiYWNrKSB7XG4gIGlmICghY291bnRyeUNvZGUgfHwgY291bnRyeUNvZGUubGVuZ3RoICE9PSAyKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMuY291bnRyeWNvZGUpKTtcbiAgfSBlbHNlIGlmICghbXNpc2RuKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMubXNpc2RuKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNhbmNlbEVuZHBvaW50ID0gZ2V0RW5kcG9pbnQoXCIvbnVtYmVyL2NhbmNlbFwiKTtcbiAgICBjYW5jZWxFbmRwb2ludC5wYXRoICs9IFwiP2NvdW50cnk9XCIgKyBjb3VudHJ5Q29kZSArIFwiJm1zaXNkbj1cIiArIG1zaXNkbjtcbiAgICBzZW5kUmVxdWVzdChjYW5jZWxFbmRwb2ludCwgXCJQT1NUXCIsIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuZXhwb3J0cy51cGRhdGVOdW1iZXIgPSBmdW5jdGlvbihjb3VudHJ5Q29kZSwgbXNpc2RuLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIGlmICghY291bnRyeUNvZGUgfHwgY291bnRyeUNvZGUubGVuZ3RoICE9PSAyKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMuY291bnRyeWNvZGUpKTtcbiAgfSBlbHNlIGlmICghbXNpc2RuKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMubXNpc2RuKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHVwZGF0ZUVuZHBvaW50ID0gZ2V0RW5kcG9pbnQoXCIvbnVtYmVyL3VwZGF0ZVwiKTtcbiAgICB1cGRhdGVFbmRwb2ludC5wYXRoICs9IFwiP2NvdW50cnk9XCIgKyBjb3VudHJ5Q29kZSArIFwiJm1zaXNkbj1cIiArIG1zaXNkbjtcbiAgICB1cGRhdGVFbmRwb2ludC5wYXRoID0gdXBkYXRlRW5kcG9pbnQucGF0aCArIFwiJlwiO1xuICAgIGZvciAodmFyIGFyZyBpbiBwYXJhbXMpIHtcbiAgICAgIHVwZGF0ZUVuZHBvaW50LnBhdGggPVxuICAgICAgICB1cGRhdGVFbmRwb2ludC5wYXRoICsgYXJnICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2FyZ10pICsgXCImXCI7XG4gICAgfVxuICAgIHNlbmRSZXF1ZXN0KHVwZGF0ZUVuZHBvaW50LCBcIlBPU1RcIiwgY2FsbGJhY2spO1xuICB9XG59O1xuXG5leHBvcnRzLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24obmV3U2VjcmV0LCBjYWxsYmFjaykge1xuICB2YXIgc2V0dGluZ3NFbmRwb2ludCA9IGdldEVuZHBvaW50KFwiL2FjY291bnQvc2V0dGluZ3NcIik7XG4gIHNldHRpbmdzRW5kcG9pbnQucGF0aCArPSBcIj9uZXdTZWNyZXQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQobmV3U2VjcmV0KTtcbiAgc2VuZFJlcXVlc3Qoc2V0dGluZ3NFbmRwb2ludCwgXCJQT1NUXCIsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMuY2hhbmdlTW9DYWxsYmFja1VybCA9IGZ1bmN0aW9uKG5ld1VybCwgY2FsbGJhY2spIHtcbiAgdmFyIHNldHRpbmdzRW5kcG9pbnQgPSBnZXRFbmRwb2ludChcIi9hY2NvdW50L3NldHRpbmdzXCIpO1xuICBzZXR0aW5nc0VuZHBvaW50LnBhdGggKz0gXCI/bW9DYWxsQmFja1VybD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChuZXdVcmwpO1xuICBzZW5kUmVxdWVzdChzZXR0aW5nc0VuZHBvaW50LCBcIlBPU1RcIiwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5jaGFuZ2VEckNhbGxiYWNrVXJsID0gZnVuY3Rpb24obmV3VXJsLCBjYWxsYmFjaykge1xuICB2YXIgc2V0dGluZ3NFbmRwb2ludCA9IGdldEVuZHBvaW50KFwiL2FjY291bnQvc2V0dGluZ3NcIik7XG4gIHNldHRpbmdzRW5kcG9pbnQucGF0aCArPSBcIj9kckNhbGxCYWNrVXJsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG5ld1VybCk7XG4gIHNlbmRSZXF1ZXN0KHNldHRpbmdzRW5kcG9pbnQsIFwiUE9TVFwiLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLnZlcmlmeU51bWJlciA9IGZ1bmN0aW9uKGlucHV0UGFyYW1zLCBjYWxsYmFjaykge1xuICBpZiAoIWlucHV0UGFyYW1zLm51bWJlciB8fCAhaW5wdXRQYXJhbXMuYnJhbmQpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy52ZXJpZnlWYWxpZGF0aW9uKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZFbmRwb2ludCA9IGNsb25lKHZlcmlmeUVuZHBvaW50KTtcbiAgICB2RW5kcG9pbnQucGF0aCArPSBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShpbnB1dFBhcmFtcyk7XG4gICAgc2VuZFJlcXVlc3QodkVuZHBvaW50LCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbmV4cG9ydHMuY2hlY2tWZXJpZnlSZXF1ZXN0ID0gZnVuY3Rpb24oaW5wdXRQYXJhbXMsIGNhbGxiYWNrKSB7XG4gIGlmICghaW5wdXRQYXJhbXMucmVxdWVzdF9pZCB8fCAhaW5wdXRQYXJhbXMuY29kZSkge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLmNoZWNrVmVyaWZ5VmFsaWRhdGlvbikpO1xuICB9IGVsc2Uge1xuICAgIHZhciB2RW5kcG9pbnQgPSBjbG9uZShjaGVja1ZlcmlmeUVuZHBvaW50KTtcbiAgICB2RW5kcG9pbnQucGF0aCArPSBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShpbnB1dFBhcmFtcyk7XG4gICAgc2VuZFJlcXVlc3QodkVuZHBvaW50LCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbmV4cG9ydHMuY29udHJvbFZlcmlmeVJlcXVlc3QgPSBmdW5jdGlvbihpbnB1dFBhcmFtcywgY2FsbGJhY2spIHtcbiAgaWYgKCFpbnB1dFBhcmFtcy5yZXF1ZXN0X2lkIHx8ICFpbnB1dFBhcmFtcy5jbWQpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5jb250cm9sVmVyaWZ5VmFsaWRhdGlvbikpO1xuICB9IGVsc2Uge1xuICAgIHZhciB2RW5kcG9pbnQgPSBjbG9uZShjb250cm9sVmVyaWZ5RW5kcG9pbnQpO1xuICAgIHZFbmRwb2ludC5wYXRoICs9IFwiP1wiICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KGlucHV0UGFyYW1zKTtcbiAgICBzZW5kUmVxdWVzdCh2RW5kcG9pbnQsIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuZXhwb3J0cy5zZWFyY2hWZXJpZnlSZXF1ZXN0ID0gZnVuY3Rpb24ocmVxdWVzdElkcywgY2FsbGJhY2spIHtcbiAgdmFyIHJlcXVlc3RJZFBhcmFtID0ge307XG4gIGlmICghcmVxdWVzdElkcykge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLnNlYXJjaFZlcmlmeVZhbGlkYXRpb24pKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZXF1ZXN0SWRzKSkge1xuICAgICAgaWYgKHJlcXVlc3RJZHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJlcXVlc3RJZFBhcmFtLnJlcXVlc3RfaWQgPSByZXF1ZXN0SWRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdElkUGFyYW0ucmVxdWVzdF9pZHMgPSByZXF1ZXN0SWRzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0SWRQYXJhbS5yZXF1ZXN0X2lkID0gcmVxdWVzdElkcztcbiAgICB9XG4gICAgdmFyIHZFbmRwb2ludCA9IGNsb25lKHNlYXJjaFZlcmlmeUVuZHBvaW50KTtcbiAgICB2RW5kcG9pbnQucGF0aCArPSBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShyZXF1ZXN0SWRQYXJhbSk7XG4gICAgc2VuZFJlcXVlc3QodkVuZHBvaW50LCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbmV4cG9ydHMubnVtYmVySW5zaWdodCA9IGZ1bmN0aW9uKGlucHV0UGFyYW1zLCBjYWxsYmFjaykge1xuICBudW1iZXJJbnNpZ2h0QXN5bmMoaW5wdXRQYXJhbXMsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMubnVtYmVySW5zaWdodEJhc2ljID0gZnVuY3Rpb24oaW5wdXRQYXJhbXMsIGNhbGxiYWNrKSB7XG4gIG51bWJlckluc2lnaHRDb21tb24obmlCYXNpY0VuZHBvaW50LCBpbnB1dFBhcmFtcywgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5udW1iZXJJbnNpZ2h0U3RhbmRhcmQgPSBmdW5jdGlvbihpbnB1dFBhcmFtcywgY2FsbGJhY2spIHtcbiAgbnVtYmVySW5zaWdodENvbW1vbihuaVN0YW5kYXJkRW5kcG9pbnQsIGlucHV0UGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLm51bWJlckluc2lnaHRBZHZhbmNlZCA9IGZ1bmN0aW9uKGlucHV0UGFyYW1zLCBjYWxsYmFjaykge1xuICBudW1iZXJJbnNpZ2h0Q29tbW9uKG5pQWR2YW5jZWRFbmRwb2ludCwgaW5wdXRQYXJhbXMsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMubnVtYmVySW5zaWdodEFkdmFuY2VkQXN5bmMgPSBmdW5jdGlvbihpbnB1dFBhcmFtcywgY2FsbGJhY2spIHtcbiAgbnVtYmVySW5zaWdodEFzeW5jKGlucHV0UGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG5mdW5jdGlvbiBudW1iZXJJbnNpZ2h0QXN5bmMoaW5wdXRQYXJhbXMsIGNhbGxiYWNrKSB7XG4gIGlmICghaW5wdXRQYXJhbXMubnVtYmVyIHx8ICFpbnB1dFBhcmFtcy5jYWxsYmFjaykge1xuICAgIHNlbmRFcnJvcihcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLm51bWJlckluc2lnaHRBZHZhbmNlZFZhbGlkYXRpb24pXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbkVuZHBvaW50ID0gY2xvbmUobmlFbmRwb2ludCk7XG4gICAgbkVuZHBvaW50LnBhdGggKz0gXCI/XCIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkoaW5wdXRQYXJhbXMpO1xuICAgIHNlbmRSZXF1ZXN0KG5FbmRwb2ludCwgY2FsbGJhY2spO1xuICB9XG59XG5cbmZ1bmN0aW9uIG51bWJlckluc2lnaHRDb21tb24oZW5kcG9pbnQsIGlucHV0UGFyYW1zLCBjYWxsYmFjaykge1xuICBpZiAodmFsaWRhdGVOdW1iZXIoaW5wdXRQYXJhbXMsIGNhbGxiYWNrKSkge1xuICAgIHZhciBpbnB1dE9iajtcbiAgICBpZiAodHlwZW9mIGlucHV0UGFyYW1zICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICBpbnB1dE9iaiA9IHsgbnVtYmVyOiBpbnB1dFBhcmFtcyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dE9iaiA9IGlucHV0UGFyYW1zO1xuICAgIH1cbiAgICB2YXIgbkVuZHBvaW50ID0gY2xvbmUoZW5kcG9pbnQpO1xuICAgIG5FbmRwb2ludC5wYXRoICs9IFwiP1wiICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KGlucHV0T2JqKTtcbiAgICBzZW5kUmVxdWVzdChuRW5kcG9pbnQsIGNhbGxiYWNrKTtcbiAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIoaW5wdXRQYXJhbXMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgaW5wdXRQYXJhbXMgPT09IFwib2JqZWN0XCIgJiYgIWlucHV0UGFyYW1zLm51bWJlcikge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLm51bWJlckluc2lnaHRWYWxpZGF0aW9uKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKFxuICAgIHR5cGVvZiBpbnB1dFBhcmFtcyA9PT0gXCJvYmplY3RcIiAmJlxuICAgICFudW1iZXJQYXR0ZXJuLnRlc3QoaW5wdXRQYXJhbXMubnVtYmVyKVxuICApIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5udW1iZXJJbnNpZ2h0UGF0dGVybkZhaWx1cmUpKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoXG4gICAgdHlwZW9mIGlucHV0UGFyYW1zICE9PSBcIm9iamVjdFwiICYmXG4gICAgKCFpbnB1dFBhcmFtcyB8fCAhbnVtYmVyUGF0dGVybi50ZXN0KGlucHV0UGFyYW1zKSlcbiAgKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMubnVtYmVySW5zaWdodFBhdHRlcm5GYWlsdXJlKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZW5kVm9pY2VNZXNzYWdlKHZvaWNlRW5kcG9pbnQsIGRhdGEsIGNhbGxiYWNrKSB7XG4gIGlmICghZGF0YS50bykge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLnRvKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVuZHBvaW50ID0gY2xvbmUodm9pY2VFbmRwb2ludCk7XG4gICAgZW5kcG9pbnQucGF0aCArPSBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShkYXRhKTtcbiAgICBfb3B0aW9ucy5sb2dnZXIuaW5mbyhcbiAgICAgIFwic2VuZGluZyBUVFMgbWVzc2FnZSB0byBcIiArIGRhdGEudG8gKyBcIiB3aXRoIG1lc3NhZ2UgXCIgKyBkYXRhLnRleHRcbiAgICApO1xuICAgIHNlbmRSZXF1ZXN0KGVuZHBvaW50LCBcIlBPU1RcIiwgZnVuY3Rpb24oZXJyLCBhcGlSZXNwb25zZSkge1xuICAgICAgaWYgKCFlcnIgJiYgYXBpUmVzcG9uc2Uuc3RhdHVzICYmIGFwaVJlc3BvbnNlLnN0YXR1cyA+IDApIHtcbiAgICAgICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoYXBpUmVzcG9uc2VbXCJlcnJvci10ZXh0XCJdKSwgYXBpUmVzcG9uc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIsIGFwaVJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnRzLnNlbmRUVFNNZXNzYWdlID0gZnVuY3Rpb24ocmVjaXBpZW50LCBtZXNzYWdlLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAoIW1lc3NhZ2UpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5tc2cpKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgb3B0c1tcInRvXCJdID0gcmVjaXBpZW50O1xuICAgIG9wdHNbXCJ0ZXh0XCJdID0gbWVzc2FnZTtcbiAgICBzZW5kVm9pY2VNZXNzYWdlKHR0c0VuZHBvaW50LCBvcHRzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbmV4cG9ydHMuc2VuZFRUU1Byb21wdFdpdGhDYXB0dXJlID0gZnVuY3Rpb24oXG4gIHJlY2lwaWVudCxcbiAgbWVzc2FnZSxcbiAgbWF4RGlnaXRzLFxuICBieWVUZXh0LFxuICBvcHRzLFxuICBjYWxsYmFja1xuKSB7XG4gIGlmICghbWVzc2FnZSkge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLm1zZykpO1xuICB9IGVsc2UgaWYgKCFtYXhEaWdpdHMgfHwgaXNOYU4obWF4RGlnaXRzKSB8fCBtYXhEaWdpdHMubGVuZ3RoID4gMTYpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5tYXhEaWdpdHMpKTtcbiAgfSBlbHNlIGlmICghYnllVGV4dCkge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLmJ5ZVRleHQpKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgb3B0c1tcInRvXCJdID0gcmVjaXBpZW50O1xuICAgIG9wdHNbXCJ0ZXh0XCJdID0gbWVzc2FnZTtcbiAgICBvcHRzW1wibWF4X2RpZ2l0c1wiXSA9IG1heERpZ2l0cztcbiAgICBvcHRzW1wiYnllX3RleHRcIl0gPSBieWVUZXh0O1xuICAgIHNlbmRWb2ljZU1lc3NhZ2UodHRzUHJvbXB0RW5kcG9pbnQsIG9wdHMsIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuZXhwb3J0cy5zZW5kVFRTUHJvbXB0V2l0aENvbmZpcm0gPSBmdW5jdGlvbihcbiAgcmVjaXBpZW50LFxuICBtZXNzYWdlLFxuICBtYXhEaWdpdHMsXG4gIHBpbkNvZGUsXG4gIGJ5ZVRleHQsXG4gIGZhaWxlZFRleHQsXG4gIG9wdHMsXG4gIGNhbGxiYWNrXG4pIHtcbiAgaWYgKCFtZXNzYWdlKSB7XG4gICAgc2VuZEVycm9yKGNhbGxiYWNrLCBuZXcgRXJyb3IoRVJST1JfTUVTU0FHRVMubXNnKSk7XG4gIH0gZWxzZSBpZiAoIW1heERpZ2l0cyB8fCBpc05hTihtYXhEaWdpdHMpIHx8IG1heERpZ2l0cy5sZW5ndGggPiAxNikge1xuICAgIHNlbmRFcnJvcihjYWxsYmFjaywgbmV3IEVycm9yKEVSUk9SX01FU1NBR0VTLm1heERpZ2l0cykpO1xuICB9IGVsc2UgaWYgKCFwaW5Db2RlIHx8IHBpbkNvZGUubGVuZ3RoICE9PSBtYXhEaWdpdHMpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5waW5Db2RlKSk7XG4gIH0gZWxzZSBpZiAoIWJ5ZVRleHQpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5ieWVUZXh0KSk7XG4gIH0gZWxzZSBpZiAoIWZhaWxlZFRleHQpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5mYWlsZWRUZXh0KSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIG9wdHNbXCJ0b1wiXSA9IHJlY2lwaWVudDtcbiAgICBvcHRzW1widGV4dFwiXSA9IG1lc3NhZ2U7XG4gICAgb3B0c1tcIm1heF9kaWdpdHNcIl0gPSBtYXhEaWdpdHM7XG4gICAgb3B0c1tcInBpbl9jb2RlXCJdID0gcGluQ29kZTtcbiAgICBvcHRzW1wiYnllX3RleHRcIl0gPSBieWVUZXh0O1xuICAgIG9wdHNbXCJmYWlsZWRfdGV4dFwiXSA9IGZhaWxlZFRleHQ7XG4gICAgc2VuZFZvaWNlTWVzc2FnZSh0dHNQcm9tcHRFbmRwb2ludCwgb3B0cywgY2FsbGJhY2spO1xuICB9XG59O1xuXG5leHBvcnRzLmNhbGwgPSBmdW5jdGlvbihyZWNpcGllbnQsIGFuc3dlclVybCwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFhbnN3ZXJVcmwpIHtcbiAgICBzZW5kRXJyb3IoY2FsbGJhY2ssIG5ldyBFcnJvcihFUlJPUl9NRVNTQUdFUy5hbnN3ZXJVcmwpKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgb3B0c1tcInRvXCJdID0gcmVjaXBpZW50O1xuICAgIG9wdHNbXCJhbnN3ZXJfdXJsXCJdID0gYW5zd2VyVXJsO1xuICAgIHNlbmRWb2ljZU1lc3NhZ2UoY2FsbEVuZHBvaW50LCBvcHRzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNlbmRFcnJvcihjYWxsYmFjaywgZXJyLCByZXR1cm5EYXRhKSB7XG4gIC8vIFRocm93IHRoZSBlcnJvciBpbiBjYXNlIGlmIHRoZXJlIGlzIG5vIGNhbGxiYWNrIHBhc3NlZFxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayhlcnIsIHJldHVybkRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVycjtcbiAgfVxufVxuXG5leHBvcnRzLnNldEhvc3QgPSBmdW5jdGlvbihhSG9zdCkge1xuICBtc2dwYXRoLmhvc3QgPSBhSG9zdDtcbiAgc2hvcnRjb2RlUGF0aC5ob3N0ID0gYUhvc3Q7XG4gIHR0c0VuZHBvaW50Lmhvc3QgPSBhSG9zdDtcbiAgdHRzUHJvbXB0RW5kcG9pbnQuaG9zdCA9IGFIb3N0O1xuICBjYWxsRW5kcG9pbnQuaG9zdCA9IGFIb3N0O1xuICB2ZXJpZnlFbmRwb2ludC5ob3N0ID0gYUhvc3Q7XG4gIGNoZWNrVmVyaWZ5RW5kcG9pbnQuaG9zdCA9IGFIb3N0O1xuICBjb250cm9sVmVyaWZ5RW5kcG9pbnQuaG9zdCA9IGFIb3N0O1xuICBzZWFyY2hWZXJpZnlFbmRwb2ludC5ob3N0ID0gYUhvc3Q7XG4gIG5pRW5kcG9pbnQuaG9zdCA9IGFIb3N0O1xuICBuaUJhc2ljRW5kcG9pbnQuaG9zdCA9IGFIb3N0O1xuICBuaVN0YW5kYXJkRW5kcG9pbnQuaG9zdCA9IGFIb3N0O1xufTtcbiJdfQ==